<?php
/**
 *
 *  Copyright (C) 2017 paj@gaiterjones.com
 *
 *   https://github.com/yzprofile/ngx_http_dyups_module
 */

namespace PAJ\Library\Docker\Scale\Varnish;

//
// Class to get and set varnish vcl
//
class VCL
{
	protected $__varnish;

	public function __construct($_host) {

		$this->__varnish = new VarnishAdminSocket(array(
			'host' => $_host,
			'auth_secret' => file_get_contents("/etc/varnish/secret"),
			'version' => '4.1'
		));
	}

	public function updateVCL($_config)
	{
		$_vcl=$this->getVCL();

		$_vcl=preg_replace("/#AUTOGENERATED_START.*#AUTOGENERATED_END/ms", "#AUTOGENERATED_START\n#AUTOGENERATED_END", $_vcl);
		$_vcl=explode("\n", $_vcl);

		$_newVCL = '';

		foreach ($_vcl as $_line) {
			$_newVCL .= "$_line\n";
				if ($_line == "#AUTOGENERATED_START") {
					$_newVCL .= $_config;
				}
		}

		// send the new VCL
		//
		$_vclName = 'scalemanager_' . time();

		$this->__varnish->vcl_inline($_vclName, trim($_newVCL));

		sleep(1);

		$this->__varnish->vcl_use($_vclName);

		// remove all VCL except the last one
		//
		$_vcls = $this->__varnish->vcl_list();

		if ($_vcls["code"] == VarnishAdminSocket::CODE_OK)
		{

		  $_vcls = explode("\n", trim($_vcls["text"]));
		  array_pop($_vcls);

		  foreach ($_vcls as $_vcl_to_remove) {

			$_vcl_to_remove = explode(" ", $_vcl_to_remove);
			$_vcl_to_remove = $_vcl_to_remove[sizeof($_vcl_to_remove) - 1];
			$this->__varnish->vcl_discard($_vcl_to_remove);

		  }

		  // error from vclist?
		}

		return $_newVCL;
	}

	public function getVCL()
	{

		$_vcl = $this->__varnish->vcl_list();

		if ($_vcl["code"] != VarnishAdminSocket::CODE_OK) throw new \Exception("Unable to read VCLs from Varnish");

		$_vcl = explode("\n", trim($_vcl["text"]))[0];
		$_vcl = explode(" ", $_vcl);
		$_vcl = $_vcl[sizeof($_vcl) - 1];

		$_vcl = $this->__varnish->vcl_show($_vcl);

		if ($_vcl["code"] != VarnishAdminSocket::CODE_OK) throw new \Exception("Unable to read latest VCL from Varnish");

		$_vcl = $_vcl["text"];

		return $_vcl;
	}

	public function getParam()
	{

		$_return = $this->__varnish->param_show();

		if ($_return["code"] != VarnishAdminSocket::CODE_OK) throw new \Exception("Unable to read VCLs from Varnish");

		$_return = $_return["text"];

		return $_return;
	}

	public function getBanner()
	{

		$_return = $this->__varnish->banner();

		if ($_return["code"] != VarnishAdminSocket::CODE_OK) throw new \Exception("Unable to read VCLs from Varnish");

		$_return = $_return["text"];

		return $_return;
	}

	public function getBackendList()
	{

		$_return = $this->__varnish->backend_list();

		if ($_return["code"] != VarnishAdminSocket::CODE_OK) throw new \Exception("Unable to read VCLs from Varnish");

		$_return = $_return["text"];

		return $_return;
	}
}
